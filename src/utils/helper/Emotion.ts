import { singleton } from 'tsyringe'

import type { MessageInfo } from '@/service/interface/app/message'

/**√°nh x·∫° c√°c c·∫£m x√∫c */
const MAP_ICON: Record<string, string> = {
  like: 'üëç',
  happiness: 'üòä',
  happy: 'üòä',
  anger: 'üò°',
  angry: 'üò°',
  sadness: 'üò¢',
  sad: 'üò¢',
  fear: 'üò±',
  surprise: 'üò≤',
  disgust: 'ü§¢',
  love: '‚ù§Ô∏è',
  jealousy: 'üòí',
  shame: 'üò≥',
  pride: 'üòå',
}
/**c√°c c·∫£m x√∫c t√≠ch c·ª±c */
const POSITIVE_EMOTION = [
  'like',
  'happiness',
  'happy',
  'love',
  'pride',
  'surprise',
]
/**c·∫£m x√∫c c·∫ßn n√™u b·∫≠t */
const HIGHT_LIGHT_EMOTION = ['happiness', 'happy', 'anger', 'angry', 'like']
/**c·∫£m x√∫c c·∫ßn n√™u b·∫≠t trong tin nh·∫Øn trang */
const HIGHT_LIGHT_EMOTION_MESS_PAGE = ['anger', 'angry']
/**c·∫£m x√∫c c·∫ßn n√™u b·∫≠t trong tin nh·∫Øn c·ªßa kh√°ch */
const HIGHT_LIGHT_EMOTION_MESS_CLIENT = ['happiness', 'happy', 'anger', 'angry']

/**L·ªõp h·ªó tr·ª£ x·ª≠ l√Ω c·∫£m x√∫c */
export interface IEmotion {
  /**c·∫£m x√∫c c√≥ ph·∫£i l√† t√≠ch c·ª±c kh√¥ng */
  isPositive(input: string): boolean
  /**c·∫£m x√∫c c√≥ h·ª£p l·ªá kh√¥ng */
  isValidEmotion(input: string): boolean
  /**l·∫•y icon c·ªßa c·∫£m x√∫c */
  getIcon(input?: string): string
  /**c·∫£m x√∫c n√†y c√≥ c·∫ßn n√™u b·∫≠t kh√¥ng */
  isHighlight(input: string): boolean
  /**c·∫£m x√∫c n√†y c√≥ c·∫ßn n√™u b·∫≠t trong tin nh·∫Øn kh√¥ng */
  isHighlightInMess(input: string, type?: MessageInfo['message_type']): boolean
}

/**L·ªõp h·ªó tr·ª£ x·ª≠ l√Ω c·∫£m x√∫c */
@singleton()
export class Emotion implements IEmotion {
  /**c·∫£m x√∫c c√≥ ph·∫£i l√† t√≠ch c·ª±c kh√¥ng */
  isPositive(input: string): boolean {
    // ki·ªÉm tra trong danh s√°ch c·∫£m x√∫c t√≠ch c·ª±c
    return POSITIVE_EMOTION.includes(input)
  }
  /**c·∫£m x√∫c c√≥ h·ª£p l·ªá kh√¥ng */
  isValidEmotion(input?: string): boolean {
    // n·∫øu kh√¥ng c√≥ input th√¨ tr·∫£ v·ªÅ false
    if (!input) return false

    // n·∫øu kh√¥ng c√≥ trong danh s√°ch c·∫£m x√∫c th√¨ tr·∫£ v·ªÅ false
    if (!MAP_ICON?.[input]) return false

    // tr·∫£ v·ªÅ true
    return true
  }
  /**l·∫•y icon c·ªßa c·∫£m x√∫c */
  getIcon(input?: string): string {
    // n·∫øu kh√¥ng c√≥ input th√¨ tr·∫£ v·ªÅ chu·ªói r·ªóng
    if (!input) return ''

    // tr·∫£ v·ªÅ icon c·ªßa c·∫£m x√∫c
    return MAP_ICON?.[input] || ''
  }
  /**c·∫£m x√∫c n√†y c√≥ c·∫ßn n√™u b·∫≠t kh√¥ng */
  isHighlight(input: string): boolean {
    // ki·ªÉm tra trong danh s√°ch c·∫£m x√∫c
    return HIGHT_LIGHT_EMOTION.includes(input)
  }
  /**c·∫£m x√∫c n√†y c√≥ c·∫ßn n√™u b·∫≠t trong tin nh·∫Øn kh√¥ng */
  isHighlightInMess(
    input: string,
    type?: MessageInfo['message_type']
  ): boolean {
    // x·ª≠ l√Ω theo lo·∫°i tin nh·∫Øn
    switch (type) {
      // tin c·ªßa trang
      case 'page':
        return HIGHT_LIGHT_EMOTION_MESS_PAGE.includes(input)
      // tin c·ªßa kh√°ch
      case 'client':
        return HIGHT_LIGHT_EMOTION_MESS_CLIENT.includes(input)
      // ·∫©n h·∫øt c√°c tin kh√°c
      default:
        return false
    }
  }
}
